/*
 * Copyright (C) 2017 Costa Paraskevopoulos.
 * Implementation for the Generic Directed Weighted Graph.
 */

#include <string>
#include <vector>
#include <memory>
#include <utility>
#include <cassert>
#include <iostream>
#include <algorithm>
#include <stdexcept>

/*
 * Adds a new Node with value val to the Graph. Returns true if the
 * Node is added to the Graph and false if there is already a Node
 * containing val in the Graph (with the Graph unchanged).
 */
template <typename N, typename E>
bool gdwg::Graph<N, E>::addNode(const N& val) {
	if (isNode(val) == false) {
		auto node = std::make_shared<Node>(val);
		nodes.push_back(node);
		return true;
	} else {
		return false;
	}
}

/*
 * Prints the data stored in all the Nodes in the graph, with one Node
 * per line, starting from the Node with the smallest outdegree to the
 * Node with the largest. If two Nodes have the same Edge count, then
 * the one with the smaller Node value determined by the < operator is
 * printed first.
 */
template <typename N, typename E>
void gdwg::Graph<N, E>::printNodes() const {
	auto sorted = nodes;

	//sort the nodes first
	std::sort(sorted.begin(), sorted.end(),
	[](const auto& lhs, const auto& rhs) {
		if (lhs->outDegree() != rhs->outDegree()) {
			return lhs->outDegree() < rhs->outDegree();
		} else {
			return lhs->getData() < rhs->getData();
		}
	});

	for (const auto& node: sorted) {
		std::cout << node->getData() << "\n";
	}
}

/*
 * Returns true if a Node with value val exists in the Graph
 * and false otherwise.
 */
template <typename N, typename E>
bool gdwg::Graph<N, E>::isNode(const N& val) const {
	for (const auto& node: nodes) {
		if (node->getData() == val) return true;
	}
	return false;
}

/*
 * Returns a shared pointer to a Node with value val if it exists in the
 * Graph and a nullptr otherwise.
 */
template <typename N, typename E>
auto gdwg::Graph<N, E>::getNode(const N& val) const {
	for (const auto& node: nodes) {
		if (node->getData() == val) return node;
	}
	return std::shared_ptr<Node>(nullptr);
}

/*
 * Adds the Edge e to the Node's outgoing Edge set. Returns false if
 * the Edge already exists and true otherwise.
 */
template <typename N, typename E>
bool gdwg::Graph<N, E>::Node::addEdge(const Edge& e) {
	auto result = std::find_if(edges.cbegin(), edges.cend(),
	[&e](const auto& edge) {
		return edge->getDest() == e.getDest() && edge->getWeight() == e.getWeight();
	});
	if (result == edges.end()) {
		auto edge = std::make_shared<Edge>(e);
		edges.push_back(edge);
		return true;
	} else {
		return false;
	}
}

/*
 * Adds a new Edge src -> dst with weight w. Returns true if the Edge is
 * added and false if the Edge src -> dst with weight w already exists in
 * the Graph. Throws std::runtime_error if src or dst is not in the Graph.
 */
template <typename N, typename E>
bool gdwg::Graph<N, E>::addEdge(const N& src, const N& dst, const E& w) {
	auto s = getNode(src);
	auto d = getNode(dst);
	if (s == nullptr || d == nullptr) {
		throw std::runtime_error("Both Nodes must be in the Graph");
	}
	return s->addEdge(Edge(s, d, w));
}

/*
 * Prints the outgoing Edges of this Node.
 */
template <typename N, typename E>
void gdwg::Graph<N, E>::Node::showEdges() const {
	if (edges.size() == 0) std::cout << "(null)\n";
	auto sorted = edges;

	//sort the edges first
	std::sort(sorted.begin(), sorted.end(),
	[](const auto& lhs, const auto& rhs) {
		if (lhs->getWeight() != rhs->getWeight()) {
			return lhs->getWeight() < rhs->getWeight();
		} else {
			return lhs->getDest()->getData() < rhs->getDest()->getData();
		}
	});

	for (const auto& e: sorted) {
		std::cout << e->getDest()->getData() << " " << e->getWeight() << "\n";
	}
}

/*
 * Prints the outgoing edges of the Node with value val in increasing
 * order of weight. If two Edges have the same weight, then the Edge
 * whose destination Node has a smaller Node value is printed first.
 * Throws std::runtime_error if the Node does not exist in the Graph.
 */
template <typename N, typename E>
void gdwg::Graph<N, E>::printEdges(const N& val) const {
	auto node = getNode(val);
	if (node == nullptr) {
		throw std::runtime_error("Node does not exist in Graph");
	}
	std::cout << "Edges attached to Node " << node->getData() << "\n";
	node->showEdges();
}

/*
 * Returns true if there is an Edge from this Node to n; false otherwise,
 */
template <typename N, typename E>
bool gdwg::Graph<N, E>::Node::isEdge(const Node& n) const {
	for (const auto& e: edges) {
		if (e->getDest()->data == n.data) return true;
	}
	return false;
}

/*
 * Returns true if the Edge src -> dst exists in the Graph and false
 * otherwise. Throws a std::runtime_error if src or dst is not in Graph.
 */
template <typename N, typename E>
bool gdwg::Graph<N ,E>::isConnected(const N& src, const N& dst) const {
	auto s = getNode(src);
	auto d = getNode(dst);
	if (s == nullptr || d == nullptr) {
		throw std::runtime_error("Both Nodes must be in the Graph");
	}
	return s->isEdge(*d);
}

/*
 * Replaces the original data stored at the particular Node with the value
 * oldData by the replacement data, newData. Returns false if a Node that
 * contains the value newData already exists in the Graph (with the Graph
 * unchanged) and true otherwise. Throws std::runtime_error if no Node
 * with value oldData can be found in the Graph.
 */
template <typename N, typename E>
bool gdwg::Graph<N, E>::replace(const N& oldData, const N& newData) {
	auto node = getNode(oldData);
	auto dest = getNode(newData);
	if (node == nullptr) {
		throw std::runtime_error("Node does not exist in Graph");
	}
	if (dest == nullptr) {
		node->setData(newData);
		return true;
	} else {
		return false;
	}
}

/*
 * Moves all incoming and outgoing Edges from the Node with value oldData
 * to the Node with value newData and deletes the Node with value oldData.
 * Duplicate Egdes are removed in the process. Throws std::runtime_error
 * if either Node does not exist in the Graph.
 */
template <typename N, typename E>
void gdwg::Graph<N, E>::mergeReplace(const N& oldData, const N& newData) {
	auto src = getNode(oldData);
	auto dst = getNode(newData);
	if (src == nullptr || dst == nullptr) {
		throw std::runtime_error("Both Nodes must be in the Graph");
	}

	//move all outgoing edges from src to outgoing edges from dst
	for (const auto& e: src->getEdges()) {
		addEdge(newData, e->getDest()->getData(), e->getWeight());
	}

	//update the destination of all incoming edges to src to dst
	for (const auto& node: nodes) {
		for (const auto& e: node->getEdges()) {
			if (e->getDest()->getData() == oldData) {
				e->setDest(dst);
			}
		}
	}

	//remove the src node
	nodes.erase(std::remove_if(nodes.begin(), nodes.end(),
	[&oldData](const auto& n) {
		return n->getData() == oldData;
	}), nodes.end());
}

/*
 * Deletes the Edge from this Node to dst with weight w if it exists.
 */
template <typename N, typename E>
void gdwg::Graph<N, E>::Node::deleteEdge(const N& dst, const E& weight) noexcept {
	edges.erase(std::remove_if(edges.begin(), edges.end(),
	[&dst, &weight](const auto& e) {
		return e->getDest()->getData() == dst && e->getWeight() == weight;
	}), edges.end());
}

/*
 * Deletes the Edge from src to dst with weight w if it exists.
 */
template <typename N, typename E>
void gdwg::Graph<N, E>::deleteEdge(const N& src, const N& dst, const E& w) noexcept {
	auto n1 = getNode(src);
	auto n2 = getNode(dst);
	if (n1 == nullptr || n2 == nullptr) return;
	n1->deleteEdge(dst, w);
}

/*
 * Deletes a given Node and all its associated incoming and outgoing
 * Edges. The Graph is unchanged if the Node does not exist.
 */
template <typename N, typename E>
void gdwg::Graph<N, E>::deleteNode(const N& val) noexcept {
	auto n = getNode(val);
	if (n == nullptr) return;

	//remove all incoming edges first
	for (const auto& node: nodes) {
		for (const auto& e: node->getEdges()) {
			if (e->getDest()->getData() == val) {
				deleteEdge(node->getData(), val, e->getWeight());
			}
		}
	}

	//then remove the node itself
	nodes.erase(std::remove_if(nodes.begin(), nodes.end(),
	[&val](const auto& n) {
		return n->getData() == val;
	}), nodes.end());
}

/*
 * Removes all Nodes and Edges from the Graph.
 */
template <typename N, typename E>
void gdwg::Graph<N, E>::clear() noexcept {
	nodes.clear();
}

/*
 * Copy constructs a Graph.
 */
template <typename N, typename E>
gdwg::Graph<N, E>::Graph(const Graph& g) {
	for (const auto& node: g.nodes) {
		nodes.push_back(std::make_shared<Node>(*node));
	}
}

/*
 * Move constructs a Graph.
 */
template <typename N, typename E>
gdwg::Graph<N, E>::Graph(Graph&& g) noexcept {
	nodes = std::move(g.nodes);
}

/*
 * Copy assignment operator for a Graph.
 */
template <typename N, typename E>
Graph<N, E>& gdwg::Graph<N, E>::operator=(const Graph& g) {
	if (this != &g) {
		nodes.clear(); //remove existing nodes
		for (const auto& node: g.nodes) {
			nodes.push_back(std::make_shared<Node>(*node));
		}
	}
	return *this;
}

/*
 * Move assignment operator for a Graph.
 */
template <typename N, typename E>
Graph<N, E>& gdwg::Graph<N, E>::operator=(Graph&& g) noexcept {
	if (this != &g) {
		nodes = std::move(g.nodes);
	}
	return *this;
}

/*
 * Sets an internal iterator to the first Node in the Graph.
 */
template <typename N, typename E>
void gdwg::Graph<N, E>::begin() const {
	current = nodes.begin();
}

/*
 * Returns true if the iterator goes past the last Node; false otherwise.
 */
template <typename N, typename E>
bool gdwg::Graph<N, E>::end() const {
	return current == nodes.end();
}

/*
 * Moves the iterator to the next Node in the Graph.
 */
template <typename N, typename E>
void gdwg::Graph<N, E>::next() const {
	assert(current != nodes.end()); //sanity check
	++current;
}

/*
 * Returns the value of the Node pointed to by the iterator.
 */
template <typename N, typename E>
const N& gdwg::Graph<N, E>::value() const {
	static N copy;
	copy = (*current)->getData();
	return copy;
}
